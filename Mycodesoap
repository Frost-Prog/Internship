import javax.xml.soap.*;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class SOAPRequestWithSecurity {

    public static void main(String[] args) {
        try {
            // Create SOAP message
            MessageFactory factory = MessageFactory.newInstance();
            SOAPMessage soapMessage = factory.createMessage();
            SOAPPart soapPart = soapMessage.getSOAPPart();
            SOAPEnvelope envelope = soapPart.getEnvelope();

            // Add namespaces for WS-Security
            envelope.addNamespaceDeclaration("wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");
            envelope.addNamespaceDeclaration("wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");
            envelope.addNamespaceDeclaration("ds", "http://www.w3.org/2000/09/xmldsig#");

            // Add security header
            SOAPHeader header = envelope.getHeader();
            SOAPElement security = header.addChildElement("Security", "wsse");
            security.addAttribute(envelope.createName("mustUnderstand"), "1");

            // Add username token
            SOAPElement usernameToken = security.addChildElement("UsernameToken", "wsse");
            SOAPElement username = usernameToken.addChildElement("Username", "wsse");
            username.addTextNode("your_username_here");

            // Add timestamp
            SOAPElement timestamp = security.addChildElement("Timestamp", "wsu");
            timestamp.addChildElement("Created", "wsu").addTextNode("timestamp_here");
            timestamp.addChildElement("Expires", "wsu").addTextNode("expiration_timestamp_here");

            // Add digital signature
            SOAPElement signature = security.addChildElement("Signature", "ds");
            signature.addNamespaceDeclaration("xmlns:ds", "http://www.w3.org/2000/09/xmldsig#");
            SOAPElement signedInfo = signature.addChildElement("SignedInfo", "ds");
            SOAPElement canonicalizationMethod = signedInfo.addChildElement("CanonicalizationMethod", "ds");
            canonicalizationMethod.setAttribute("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
            SOAPElement signatureMethod = signedInfo.addChildElement("SignatureMethod", "ds");
            signatureMethod.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#rsa-sha1");
            SOAPElement reference = signedInfo.addChildElement("Reference", "ds");
            reference.addNamespaceDeclaration("xmlns", "http://www.w3.org/2000/09/xmldsig#");
            SOAPElement transforms = reference.addChildElement("Transforms", "ds");
            SOAPElement transform = transforms.addChildElement("Transform", "ds");
            transform.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
            SOAPElement digestMethod = reference.addChildElement("DigestMethod", "ds");
            digestMethod.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#sha1");
            SOAPElement digestValue = reference.addChildElement("DigestValue", "ds");
            SOAPElement signatureValue = signature.addChildElement("SignatureValue", "ds");
            signatureValue.addTextNode(signSOAPMessage(soapMessage, "your_private_key_here"));

            // Print the SOAP request
            soapMessage.writeTo(System.out);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    // Method to sign SOAP message
    private static String signSOAPMessage(SOAPMessage soapMessage, String privateKey) throws Exception {
        Signature signature = Signature.getInstance("SHA1withRSA");
        byte[] privateKeyBytes = Base64.getDecoder().decode(privateKey);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        PrivateKey privateKeyObj = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyBytes));
        signature.initSign(privateKeyObj);

        // Compute signature
        SOAPPart soapPart = soapMessage.getSOAPPart();
        String canonicalizedMessage = new String(soapPart.getContent().toString().getBytes());
        signature.update(canonicalizedMessage.getBytes());

        // Generate signature value
        byte[] signatureBytes = signature.sign();
        return Base64.getEncoder().encodeToString(signatureBytes);
    }
}

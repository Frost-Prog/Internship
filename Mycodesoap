import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

public class WSSecurity {

    public static void main(String[] args) {
        try {
            // Load keystore containing private key for signing
            // (Assuming this part remains the same)

            // Load public key for encryption
            // (Assuming this part remains the same)

            // Load SOAP message to be signed and encrypted from file
            Document soapMessage = loadSOAPMessage("path/to/soap_message.txt");

            // Sign the SOAP message
            // (Assuming this part remains the same)

            // Encrypt the SOAP message
            // (Assuming this part remains the same)

            // Send the signed and encrypted SOAP message
            sendSOAPMessage(soapMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to load SOAP message from file
    public static Document loadSOAPMessage(String filePath) throws ParserConfigurationException, IOException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true); // Ensure namespaces are processed
            DocumentBuilder builder = factory.newDocumentBuilder();
            String xmlContent = readTextFile(filePath);
            return builder.parse(new ByteArrayInputStream(xmlContent.getBytes()));
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Method to read text file
    private static String readTextFile(String filePath) throws IOException {
        StringBuilder content = new StringBuilder();
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                content.append(line).append("\n");
            }
        }
        return content.toString();
    }

    // Method to send SOAP message
    public static void sendSOAPMessage(Document soapMessage) {
        // Implement sending logic
    }
}

-----------------------
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

public class WSSecurity {

    public static void main(String[] args) {
        try {
            // Load keystore containing private key for signing
            // (Assuming this part remains the same)

            // Load public key for encryption
            // (Assuming this part remains the same)

            // Load hardcoded SOAP message to be signed and encrypted
            Document soapMessage = loadHardcodedSOAPMessage();

            // Sign the SOAP message
            // (Assuming this part remains the same)

            // Encrypt the SOAP message
            // (Assuming this part remains the same)

            // Send the signed and encrypted SOAP message
            sendSOAPMessage(soapMessage);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Method to load hardcoded SOAP message
    public static Document loadHardcodedSOAPMessage() throws ParserConfigurationException {
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.newDocument();

            // Create SOAP Envelope element
            Element envelope = document.createElementNS("http://schemas.xmlsoap.org/soap/envelope/", "SOAP-ENV:Envelope");
            document.appendChild(envelope);

            // Create SOAP Header element
            Element header = document.createElement("SOAP-ENV:Header");
            envelope.appendChild(header);

            // Create Security element
            Element security = document.createElementNS("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "wsse:Security");
            security.setAttribute("mustUnderstand", "1");
            header.appendChild(security);

            // Create UsernameToken element
            Element usernameToken = document.createElement("wsse:UsernameToken");
            security.appendChild(usernameToken);

            // Create Username element
            Element username = document.createElement("wsse:Username");
            username.appendChild(document.createTextNode("B000200206"));
            usernameToken.appendChild(username);

            // Create Timestamp element
            Element timestamp = document.createElementNS("http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", "wsu:Timestamp");
            security.appendChild(timestamp);

            // Create Created element
            Element created = document.createElement("wsu:Created");
            created.appendChild(document.createTextNode("30"));
            timestamp.appendChild(created);

            // Create Expires element
            Element expires = document.createElement("wsu:Expires");
            expires.appendChild(document.createTextNode("30"));
            timestamp.appendChild(expires);

            // Create Signature element
            Element signature = document.createElementNS("http://www.w3.org/2000/09/xmldsig#", "ds:Signature");
            security.appendChild(signature);

            // Create SignedInfo element
            Element signedInfo = document.createElement("ds:SignedInfo");
            signature.appendChild(signedInfo);

            // Create CanonicalizationMethod element
            Element canonicalizationMethod = document.createElement("ds:CanonicalizationMethod");
            canonicalizationMethod.setAttribute("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
            signedInfo.appendChild(canonicalizationMethod);

            // Create SignatureMethod element
            Element signatureMethod = document.createElement("ds:SignatureMethod");
            signatureMethod.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#rsa-sha1");
            signedInfo.appendChild(signatureMethod);

            return document;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // Method to send SOAP message
    public static void sendSOAPMessage(Document soapMessage) {
        // Implement sending logic
    }
}



------------------------
import javax.xml.soap.*;
import java.io.*;

public class SOAPMessageLoaderFromFile {
    public static void main(String[] args) {
        try {
            // Create a SOAP message factory
            MessageFactory factory = MessageFactory.newInstance();

            // Load the SOAP message from a file
            File file = new File("soap_message.xml");
            FileInputStream fileInputStream = new FileInputStream(file);
            SOAPMessage message = factory.createMessage(new MimeHeaders(), fileInputStream);

            // Process the SOAP message as needed
            // For example, you can extract information from the message headers
            SOAPHeader header = message.getSOAPHeader();
            Iterator<SOAPHeaderElement> headerIterator = header.examineAllHeaderElements();
            while (headerIterator.hasNext()) {
                SOAPHeaderElement headerElement = headerIterator.next();
                System.out.println("Header name: " + headerElement.getElementName());
                System.out.println("Header value: " + headerElement.getValue());
            }

            // Access the SOAP body
            SOAPBody body = message.getSOAPBody();
            // Process the SOAP body as needed

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

--------------------------------

import java.io.FileInputStream;
import java.io.IOException;
import java.security.*;
import java.security.cert.CertificateException;
import javax.xml.crypto.dsig.*;
import javax.xml.crypto.dsig.dom.DOMSignContext;
import javax.xml.crypto.dsig.keyinfo.*;
import org.w3c.dom.Document;

public class WSSecurity {
    
    // Method to sign the SOAP message using SHA-1 algorithm
    public static void signSOAPMessage(Document soapMessage, PrivateKey privateKey, X509Certificate cert) throws NoSuchAlgorithmException, InvalidAlgorithmParameterException, MarshalException, XMLSignatureException {
        XMLSignatureFactory xmlSigFactory = XMLSignatureFactory.getInstance("DOM");
        
        // Create a Reference to the enveloped document
        Reference ref = xmlSigFactory.newReference("", xmlSigFactory.newDigestMethod(DigestMethod.SHA1, null),
                Collections.singletonList(xmlSigFactory.newTransform(Transform.ENVELOPED, (TransformParameterSpec) null)),
                null, null);
        
        // Create a SignedInfo
        SignedInfo signedInfo = xmlSigFactory.newSignedInfo(
                xmlSigFactory.newCanonicalizationMethod(CanonicalizationMethod.INCLUSIVE,
                        (C14NMethodParameterSpec) null),
                xmlSigFactory.newSignatureMethod(SignatureMethod.RSA_SHA1, null),
                Collections.singletonList(ref));
        
        // Create a KeyInfo containing the public key
        KeyInfoFactory keyInfoFactory = xmlSigFactory.getKeyInfoFactory();
        KeyValue keyValuePair = keyInfoFactory.newKeyValue(cert.getPublicKey());
        KeyInfo keyInfo = keyInfoFactory.newKeyInfo(Collections.singletonList(keyValuePair));
        
        // Create the XMLSignature
        XMLSignature signature = xmlSigFactory.newXMLSignature(signedInfo, keyInfo);
        
        // Sign the SOAP message
        DOMSignContext signContext = new DOMSignContext(privateKey, soapMessage.getDocumentElement());
        signature.sign(signContext);
    }
    
    // Method to encrypt the SOAP message using the public key
    public static void encryptSOAPMessage(Document soapMessage, PublicKey publicKey) {
        // Implement encryption logic using public key
    }
    
    public static void main(String[] args) throws KeyStoreException, IOException, NoSuchAlgorithmException, CertificateException, UnrecoverableKeyException, InvalidAlgorithmParameterException, MarshalException, XMLSignatureException {
        // Load keystore containing private key for signing
        KeyStore keyStore = KeyStore.getInstance("JKS");
        FileInputStream fis = new FileInputStream("clientKeystore.jks");
        keyStore.load(fis, "keystorePassword".toCharArray());
        
        // Get private key and certificate
        String alias = "clientPrivateKeyAlias";
        String password = "privateKeyPassword";
        PrivateKey privateKey = (PrivateKey) keyStore.getKey(alias, password.toCharArray());
        X509Certificate cert = (X509Certificate) keyStore.getCertificate(alias);
        
        // Load public key for encryption
        KeyStore trustStore = KeyStore.getInstance("JKS");
        FileInputStream fisTrust = new FileInputStream("serverKeystore.jks");
        trustStore.load(fisTrust, "truststorePassword".toCharArray());
        PublicKey publicKey = trustStore.getCertificate("serverPublicKeyAlias").getPublicKey();
        
        // Load SOAP message to be signed and encrypted
        Document soapMessage = loadSOAPMessage();
        
        // Sign the SOAP message
        signSOAPMessage(soapMessage, privateKey, cert);
        
        // Encrypt the SOAP message
        encryptSOAPMessage(soapMessage, publicKey);
        
        // Send the signed and encrypted SOAP message
        sendSOAPMessage(soapMessage);
    }
    
    // Method to load SOAP message from file or construct programmatically
    public static Document loadSOAPMessage() {
        // Implement loading logic
        return null;
    }
    
    // Method to send SOAP message
    public static void sendSOAPMessage(Document soapMessage) {
        // Implement sending logic
    }
}





-------,--
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ds="http://www.w3.org/2000/09/xmldsig#" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
    <SOAP-ENV:Header>
        <wsse:Security mustUnderstand="1">
            <wsse:UsernameToken>
                <wsse:Username>B000200206</wsse:Username>
            </wsse:UsernameToken>
            <wsu:Timestamp>
                <wsu:Created>30</wsu:Created>
                <wsu:Expires>30</wsu:Expires>
            </wsu:Timestamp>
            <ds:Signature>
                <ds:SignedInfo>
                    <ds:CanonicalizationMethod Algorithm="http://www.w3.org/TR/2001/REC-xml-c14n-20010315"/>
                    <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
                </ds:SignedInfo>
            </ds:Signature>
        </wsse:Security>
    </SOAP-ENV:Header>
    <SOAP-ENV:Body/>
</SOAP-ENV:Envelope>


-------------------------------------------------------------------------------------------------------







import javax.xml.soap.*;

public class SOAPRequestWithSecurity {

    public static void main(String[] args) {
        try {
            // Create SOAP message
            MessageFactory factory = MessageFactory.newInstance();
            SOAPMessage soapMessage = factory.createMessage();
            SOAPPart soapPart = soapMessage.getSOAPPart();
            SOAPEnvelope envelope = soapPart.getEnvelope();

            // Add namespaces for WS-Security
            envelope.addNamespaceDeclaration("wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");
            envelope.addNamespaceDeclaration("wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");
            envelope.addNamespaceDeclaration("ds", "http://www.w3.org/2000/09/xmldsig#");

            // Add security header
            SOAPHeader header = envelope.getHeader();
            SOAPElement security = header.addChildElement("Security", "wsse");
            security.addAttribute(envelope.createName("mustUnderstand"), "1");

            // Add username token
            SOAPElement usernameToken = security.addChildElement("UsernameToken", "wsse");
            SOAPElement username = usernameToken.addChildElement("Username", "wsse");
            username.addTextNode("your_username_here");

            // Add timestamp
            SOAPElement timestamp = security.addChildElement("Timestamp", "wsu");
            timestamp.addChildElement("Created", "wsu").addTextNode("timestamp_here");
            timestamp.addChildElement("Expires", "wsu").addTextNode("expiration_timestamp_here");

            // Add digital signature
            SOAPElement signature = security.addChildElement("Signature", "ds");
            SOAPElement signedInfo = signature.addChildElement("SignedInfo", "ds");
            signedInfo.addChildElement("CanonicalizationMethod", "ds").setAttribute("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
            signedInfo.addChildElement("SignatureMethod", "ds").setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#rsa-sha1");
            // Add reference, digest value, and signature value here

            // Print the SOAP request
            soapMessage.writeTo(System.out);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
}

--------------
import javax.xml.soap.*;
import java.security.*;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class SOAPRequestWithSecurity {

    public static void main(String[] args) {
        try {
            // Create SOAP message
            MessageFactory factory = MessageFactory.newInstance();
            SOAPMessage soapMessage = factory.createMessage();
            SOAPPart soapPart = soapMessage.getSOAPPart();
            SOAPEnvelope envelope = soapPart.getEnvelope();

            // Add namespaces for WS-Security
            envelope.addNamespaceDeclaration("wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");
            envelope.addNamespaceDeclaration("wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");
            envelope.addNamespaceDeclaration("ds", "http://www.w3.org/2000/09/xmldsig#");

            // Add security header
            SOAPHeader header = envelope.getHeader();
            SOAPElement security = header.addChildElement("Security", "wsse");
            security.addAttribute(envelope.createName("mustUnderstand"), "1");

            // Add username token
            SOAPElement usernameToken = security.addChildElement("UsernameToken", "wsse");
            SOAPElement username = usernameToken.addChildElement("Username", "wsse");
            username.addTextNode("your_username_here");

            // Add timestamp
            SOAPElement timestamp = security.addChildElement("Timestamp", "wsu");
            timestamp.addChildElement("Created", "wsu").addTextNode("timestamp_here");
            timestamp.addChildElement("Expires", "wsu").addTextNode("expiration_timestamp_here");

            // Add digital signature
            SOAPElement signature = security.addChildElement("Signature", "ds");
            signature.addNamespaceDeclaration("xmlns:ds", "http://www.w3.org/2000/09/xmldsig#");
            SOAPElement signedInfo = signature.addChildElement("SignedInfo", "ds");
            SOAPElement canonicalizationMethod = signedInfo.addChildElement("CanonicalizationMethod", "ds");
            canonicalizationMethod.setAttribute("Algorithm", "http://www.w3.org/TR/2001/REC-xml-c14n-20010315");
            SOAPElement signatureMethod = signedInfo.addChildElement("SignatureMethod", "ds");
            signatureMethod.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#rsa-sha1");
            SOAPElement reference = signedInfo.addChildElement("Reference", "ds");
            reference.addNamespaceDeclaration("xmlns", "http://www.w3.org/2000/09/xmldsig#");
            SOAPElement transforms = reference.addChildElement("Transforms", "ds");
            SOAPElement transform = transforms.addChildElement("Transform", "ds");
            transform.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#enveloped-signature");
            SOAPElement digestMethod = reference.addChildElement("DigestMethod", "ds");
            digestMethod.setAttribute("Algorithm", "http://www.w3.org/2000/09/xmldsig#sha1");
            SOAPElement digestValue = reference.addChildElement("DigestValue", "ds");
            SOAPElement signatureValue = signature.addChildElement("SignatureValue", "ds");
            signatureValue.addTextNode(signSOAPMessage(soapMessage, "your_private_key_here"));

            // Print the SOAP request
            soapMessage.writeTo(System.out);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    // Method to sign SOAP message
    private static String signSOAPMessage(SOAPMessage soapMessage, String privateKey) throws Exception {
        Signature signature = Signature.getInstance("SHA1withRSA");
        byte[] privateKeyBytes = Base64.getDecoder().decode(privateKey);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        PrivateKey privateKeyObj = keyFactory.generatePrivate(new PKCS8EncodedKeySpec(privateKeyBytes));
        signature.initSign(privateKeyObj);

        // Compute signature
        SOAPPart soapPart = soapMessage.getSOAPPart();
        String canonicalizedMessage = new String(soapPart.getContent().toString().getBytes());
        signature.update(canonicalizedMessage.getBytes());

        // Generate signature value
        byte[] signatureBytes = signature.sign();
        return Base64.getEncoder().encodeToString(signatureBytes);
    }
}
-----------------------------------------------------------------------------------

<soapenv:Envelope xmlns:dit="http://iec.incometax.gov.in/ditsecws" xmlns:req="http://iec.incometax.gov.in/ditsecws/request" xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
   <soapenv:Header>
      <wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
         <wsse:BinarySecurityToken EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary" ValueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3" wsu:Id="8374AE8FD47309F5181713973770353152">MIICyzCCAbOgAwIBAgIEEElUbzANBgkqhkiG9w0BAQUFADAWMRQwEgYDVQQDEwtJbmZvc3lzIEx0ZDAeFw0yMjA5MjIwNDM4MzJaFw0yNDA1MTQwNDM4MzJaMBYxFDASBgNVBAMTC0luZm9zeXMgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAhfamuA3VA3M+7TrbcAkQgpe2jZZJNjy6QFGy3HfUB9RZUtwb8awvMa5HTrQ/3/U/XRZs8Kg+i9wuhW7aoHnhv7qF2coyz2ZHOqezrcHzWA8ZLuGNB5W71TdqRw6SklPixHtyM5lH7tJhtaI3HTOUQqYbyNI1+Z/NcEXA938iJcRRhzhb8ypLxe3iZcO0280p0sR73RpLq/LhTKDm05zaTzh0oFHqQ3kb9KJZVgWCeKxrTcnb+1RUKtivPmsLXdm4sOsYhJAzbj7NbltC7GdZaE0WfqNfvNH0VMJXHYganyYVnMHB9cgwDdP2B/n6piXNCY8FrLi1A97EXUxBHEP6KQIDAQABoyEwHzAdBgNVHQ4EFgQU1Q0s/iuIoZVh6sOIGEWDTQDn55swDQYJKoZIhvcNAQEFBQADggEBAER+9dTj6piRWFj3L1cHavW8vFFTvhuOwjr0SGHgBmzw+qyIYFOnCXyhJehtvWWk1Nsza1eNPrlMZaB34oXcTk6TuEnYKuEIxpszFnldQa0ou+X05JatzQPVKgfWktAA2VDSXu+oPDCQhs0t0QgV4VnDe/qtjHpvZHs+5qVy8mfaem8sEAASa47RMdJhf3tudCB9qs5b3F9eIuIc3b1WZ8jIEN4MT2zQFZKizL1MzLlDq2JRCH0Y4Y8m7qzJNXjQIxk5N3qMQmp1RvFUKXzXElDJ6XwSOkH9jqxW4Cdxmx6vk2ok2zzRiJ9HhmPyrbOvqiqSLfGMyelR9kPEKYRITok=</wsse:BinarySecurityToken>
         <xenc:EncryptedKey Id="EK-8374AE8FD47309F5181713973770353151" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
            <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
            <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
               <wsse:SecurityTokenReference>
                  <wsse:Reference URI="#8374AE8FD47309F5181713973770353152" ValueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"/>
               </wsse:SecurityTokenReference>
            </ds:KeyInfo>
            <xenc:CipherData>
               <xenc:CipherValue>g3N9KJ/sPqWNcq7wmrrUW115iYcPCr6iu/opDSiV7Aky2JC/rV5vNGliRyW26PN+7EyLSrYJETwybP20yTZ7JsDf4uHqT47ieBgjewXXyapwiB300hTSKrgcX8VmuA/xnzvFPhpXqFd+Fa43cq9P7U44AjRcvtGxFkOBhfQlICjrkPVo8nijZ1yPLn91qvk6T5uSzAuvJZVkZc2JwDZ7q3N1+O916eL9mZYhx4mRApocAwF8o5xoHMlBotv+qJrUvfIk5Tr69QccKUVxGXt4p6kmXyD9YgbAf97lsQ1tondggIWbU1GOmaXdiCDfjq692W5vaSF9oJFHmFlMcvBqQw==</xenc:CipherValue>
            </xenc:CipherData>
            <xenc:ReferenceList>
               <xenc:DataReference URI="#ED-8374AE8FD47309F5181713973770354153"/>
               <xenc:DataReference URI="#ED-8374AE8FD47309F5181713973770355154"/>
            </xenc:ReferenceList>
         </xenc:EncryptedKey>
         <ds:Signature Id="SIG-8374AE8FD47309F5181713973770343150" xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
            <ds:SignedInfo>
               <ds:CanonicalizationMethod Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                  <ec:InclusiveNamespaces PrefixList="dit req soapenv" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
               </ds:CanonicalizationMethod>
               <ds:SignatureMethod Algorithm="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
               <ds:Reference URI="#TS-8374AE8FD47309F5181713973770337144">
                  <ds:Transforms>
                     <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                        <ec:InclusiveNamespaces PrefixList="wsse dit req soapenv" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                     </ds:Transform>
                  </ds:Transforms>
                  <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                  <ds:DigestValue>6eX2/8FosEpbmBl2pwWrKXTfDYg=</ds:DigestValue>
               </ds:Reference>
               <ds:Reference URI="#UsernameToken-8374AE8FD47309F5181713973770337145">
                  <ds:Transforms>
                     <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                        <ec:InclusiveNamespaces PrefixList="dit req soapenv" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                     </ds:Transform>
                  </ds:Transforms>
                  <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                  <ds:DigestValue>B1RGzemTjbJvYVcjL2Qf1Y7YO+Q=</ds:DigestValue>
               </ds:Reference>
               <ds:Reference URI="#id-8374AE8FD47309F5181713973770342149">
                  <ds:Transforms>
                     <ds:Transform Algorithm="http://www.w3.org/2001/10/xml-exc-c14n#">
                        <ec:InclusiveNamespaces PrefixList="dit req" xmlns:ec="http://www.w3.org/2001/10/xml-exc-c14n#"/>
                     </ds:Transform>
                  </ds:Transforms>
                  <ds:DigestMethod Algorithm="http://www.w3.org/2000/09/xmldsig#sha1"/>
                  <ds:DigestValue>LoYo1wzQMjyJ/ZTVH6UQfSPYqkM=</ds:DigestValue>
               </ds:Reference>
            </ds:SignedInfo>
            <ds:SignatureValue>FKaDLF99BfDmf5ipBsQ1Xm526AjNkTeEyxc1k5AQrXgVKrVbqOBVD0w4DxnqKcq1C+ZgmYkMZ/uDwle2qS9dTTmOk/ilUd4+nsEvhcid27+XQrGpSIpvf1o8k7szwn+6EPkvms8tTleK70Dz3xCvBYccWjkvx427BQQXOzqv4VkG40rTD6uRAqjdiiYKtFNPF9mQyf1mkOw2yTPGVCi40NDbigORZ4RpmIuk8BNp8aIb7krxdosFuS78p6vxsnit9n7TDLqOku3BzVTrMmQ6574XhWOGPhpSTnOaAPdUGMFdaXBQ7jNWLrQOBNGLAe5EOtX7w3X5Nsff4lSwI4GTBg==</ds:SignatureValue>
            <ds:KeyInfo Id="KI-8374AE8FD47309F5181713973770342147">
               <wsse:SecurityTokenReference wsu:Id="STR-8374AE8FD47309F5181713973770342148">
                  <wsse:KeyIdentifier EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary" ValueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3">MIIFmTCCBIGgAwIBAgITGgAQyUIzz6iIY1+eWQAAABDJQjANBgkqhkiG9w0BAQsFADBAMRMwEQYKCZImiZPyLGQBGRYDU0JJMRIwEAYKCZImiZPyLGQBGRYCQUQxFTATBgNVBAMTDFNCSS1QUk9ELVJDQTAeFw0yMzExMDQxNDI0MjJaFw0yNTExMDMxNDI0MjJaMGYxCzAJBgNVBAYTAklOMRQwEgYDVQQIEwtNYWhhcmFzaHRyYTEPMA0GA1UEBxMGTXVtYmFpMQwwCgYDVQQKEwNTQkkxDDAKBgNVBAsTA0VJUzEUMBIGA1UEAwwLRU5DX0VJU19VQVQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDdkkvd/PDvCheiFiU66V5gHoGDZY/ilXqdnwmm/ER8B6OJofI5ZaXeZy7g2lGpda79KNLik31Y3SeYpPMc2JQ6qQdwNDNa8HcLSUrPu9guXOJzBu1+xRPNmB4eVvbI67iwNtglxrpICjIHLF2c5bLI5Q2zd06RgI2AY6xVmLM3kvhKJJdSL7lbunxWvrr5GnjQErH7U0kU/TuDswkJo1Uqlg7+R/wOAamSB8WrAtAI+a1b6hDOUriGUIAN9UGPquYswt5/a//rp+GCdp3H7zg9Lv9oJ8elqtqpS4S5WDcVcKfWgW8K+R4iczUGnkGp5vjvgdwGqqGbNVr+Bp8iBPr1AgMBAAGjggJkMIICYDAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMCcGCSsGAQQBgjcVCgQaMBgwCgYIKwYBBQUHAwEwCgYIKwYBBQUHAwIwHQYDVR0OBBYEFIgHGLf4jUSLVn2yTXmyOLDcNTLdMB8GA1UdIwQYMBaAFDeaIHQwXiT9H+W/rv8A9GsVdZ+wMIHLBgNVHR8EgcMwgcAwgb2ggbqggbeGgbRsZGFwOi8vL0NOPVNCSS1QUk9ELVJDQSxDTj1TQklST09UQ0FQUk9ELENOPUNEUCxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPUFELERDPVNCST9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0P2Jhc2U/b2JqZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnQwgbkGCCsGAQUFBwEBBIGsMIGpMIGmBggrBgEFBQcwAoaBmWxkYXA6Ly8vQ049U0JJLVBST0QtUkNBLENOPUFJQSxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNlcyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPUFELERDPVNCST9jQUNlcnRpZmljYXRlP2Jhc2U/b2JqZWN0Q2xhc3M9Y2VydGlmaWNhdGlvbkF1dGhvcml0eTA8BgkrBgEEAYI3FQcELzAtBiUrBgEEAYI3FQiGgZxcg8eAW4P1kTeE4IFms+pkaobo0A2Dge0JAgFkAgEVMA0GCSqGSIb3DQEBCwUAA4IBAQBbwhUAEQRVQy8mKVFE3WoohhU2dPQ0w/oHuq762lr2H48Qf1o0BtgX5OI/TikqoopZ3c/G5OBqEa1uTGUV9lCEbd9UxsTCPWueVaxy9H6yXgRIhlxaplz44iRAPmZwnxdWZusmK4FVKtFvO1GPNQ6wnGlvn7u5QVKvoCUwU/1rRuxlOYZpEwHh4ozvCgbl1P6+Wr4Lb0JcszHxSYtJgsZtLjUtyplhQn7389Ili/jZ1kENQCDuqsaDYNlVxyXKPBJXRu11wvu3+Sol9o3FqrWb96LgN7S02ZhwJlNYTU6FhR65L64vgPyHO4UXtivuigHNgG4nvVUNuHJMHYHDZx1j</wsse:KeyIdentifier>
               </wsse:SecurityTokenReference>
            </ds:KeyInfo>
         </ds:Signature>
         <wsse:UsernameToken wsu:Id="UsernameToken-8374AE8FD47309F5181713973770337145">
            <xenc:EncryptedData Id="ED-8374AE8FD47309F5181713973770354153" Type="http://www.w3.org/2001/04/xmlenc#Content" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
               <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
               <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
                  <wsse:SecurityTokenReference wsse11:TokenType="http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKey" xmlns:wsse11="http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd">
                     <wsse:Reference URI="#EK-8374AE8FD47309F5181713973770353151"/>
                  </wsse:SecurityTokenReference>
               </ds:KeyInfo>
               <xenc:CipherData>
                  <xenc:CipherValue>6mIRjLJ8Hi857mtUQUx4NgLqzlewmkptugb1pYWWnemLev7I0iRe4pZwwz3SNFcxP/TWU2CxkNAxvUrJW728M9ao1ioLXDUYyTdOsXxEDv2ugFmOKGJZAeHUJATAMitd8dTSxT67YMxJjMmwwp1w0rsexUgqGRNu7LhtdaGrdbOkWvl/8FQji+UGPS8niFBlg6Vti3vpe22OjywlnWXJQEiO7Q9+hRdx/EYbc3JAXhmFsCUKV5gw1YrLyOB3Q29xXHphj3pzHK1zTYhYI0+OQQ==</xenc:CipherValue>
               </xenc:CipherData>
            </xenc:EncryptedData>
         </wsse:UsernameToken>
         <wsu:Timestamp wsu:Id="TS-8374AE8FD47309F5181713973770337144">
            <wsu:Created>2024-04-24T15:49:30.336Z</wsu:Created>
            <wsu:Expires>2024-04-25T00:09:30.336Z</wsu:Expires>
         </wsu:Timestamp>
      </wsse:Security>
   </soapenv:Header>
   <soapenv:Body wsu:Id="id-8374AE8FD47309F5181713973770342149" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd">
      <xenc:EncryptedData Id="ED-8374AE8FD47309F5181713973770355154" Type="http://www.w3.org/2001/04/xmlenc#Content" xmlns:xenc="http://www.w3.org/2001/04/xmlenc#">
         <xenc:EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
         <ds:KeyInfo xmlns:ds="http://www.w3.org/2000/09/xmldsig#">
            <wsse:SecurityTokenReference wsse11:TokenType="http://docs.oasis-open.org/wss/oasis-wss-soap-message-security-1.1#EncryptedKey" xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsse11="http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd">
               <wsse:Reference URI="#EK-8374AE8FD47309F5181713973770353151"/>
            </wsse:SecurityTokenReference>
         </ds:KeyInfo>
         <xenc:CipherData>
            <xenc:CipherValue>BHP5iBgglEG/F4fr7o8lMW9l8Cc3Ks64BeaQ/GkRx37JW9OXwExv0hBvKRwA333zDzr7L7jimYI3bd/en+F1EqiAjUTrZpybVVcp6IIOJwL4Sgqu2FPdwvuzN/YIYbZ4uQHrJ72KHEWXyx5GsXMM7jKjUi+vLWG85QmCf2qSyGbY4HxOci7rT1VJcGJl+6O9aCgHj1cdSbYgqs9IFcswIwHRBWrsqmWJIauqcWbDyhssExNRj9BngcHq4aZZiOVrqxK+ZcGXaY3GjOyeprrUqpFJTRHjHytxkYnBFr+z1O7A2jRJTv2k9Kw/xPubroqAYj6EBbTz+36RY5FcTplIw2k5NqzjbXagjjc7n6rbGzWgX5Ev/el04GDMSYLzMMldZlBO9ckRhzywFe+S2l2W3CZ4WrqNqHDGLE935OdfHmmDWnVOLU8Wik3tmaOdo0F6HwIX4aG+h/G8H3XLfEoxC6HBvo9S6xhF/2f2FnRb0f7rDYZrgjgJV4mHa53oG4f2u0mOTw6vx4AGFmdoR/Sinf7slR0u/ZD/+kzUMMHCdT/m7jiwJ6MwnrOYLa58zGz/lyJqDfL+MinMpwzVWUjvXRWOEZqHvmxfgKh7OqmkyQlMOL/Ju/NULtNVUxBOC6WblwPHiPorDQPlWqwU4LbfgFstzwlB4s82Bpb6uYXHw2Rg0equvumb46pMngCZbXVmfXnwk3dbHxoEQ0OZMN8fe4+jOyNMFHQK1Yycg1qOEoCm/eYIbQbG1VVlwa6IIX4NZiXcXAnMvjgpaQSZu5/MC6jWixL6bdHPNCJJ2orJmC7r2cWeKxFCnGSCHA4Q0SP+zdMYd1/WF43m86BIMuB2XwgOm0bArwihjd+sZVTYU0nGKCTbM3n4dsvYeZUBYNcnAd84+hRtHjRTTnPdlHb5+jHLPvHLOoP5IFUadkdDe5vz3hupDMBIU0mHfAEFNz/8</xenc:CipherValue>
         </xenc:CipherData>
      </xenc:EncryptedData>
   </soapenv:Body>
</soapenv:Envelope>




-----‐---------------------

import javax.xml.soap.*;

public class SOAPRequestWithSecurity {

    public static void main(String[] args) {
        try {
            // Create SOAP message
            MessageFactory factory = MessageFactory.newInstance();
            SOAPMessage soapMessage = factory.createMessage();
            SOAPPart soapPart = soapMessage.getSOAPPart();
            SOAPEnvelope envelope = soapPart.getEnvelope();

            // Add namespaces for WS-Security
            envelope.addNamespaceDeclaration("wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");
            envelope.addNamespaceDeclaration("wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd");
            envelope.addNamespaceDeclaration("ds", "http://www.w3.org/2000/09/xmldsig#");

            // Add security header
            SOAPHeader header = envelope.getHeader();
            SOAPElement security = header.addChildElement("Security", "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd");
            security.addAttribute(envelope.createName("mustUnderstand"), "1");

            // Add username token
            SOAPElement usernameToken = security.addChildElement("UsernameToken", "wsse");
            SOAPElement username = usernameToken.addChildElement("Username", "wsse");
            username.addTextNode("your_username_here");

            // Add timestamp
            SOAPElement timestamp = security.addChildElement("Timestamp", "wsu");
            timestamp.addChildElement("Created", "wsu").addTextNode("timestamp_here");
            timestamp.addChildElement("Expires", "wsu").addTextNode("expiration_timestamp_here");

            // Add digital signature
            SOAPElement signature = security.addChildElement("Signature", "ds");
            signature.addNamespaceDeclaration("ds", "http://www.w3.org/2000/09/xmldsig#");
            // Add signature data here

            // Print the SOAP request
            soapMessage.writeTo(System.out);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
}

